version: '3.9'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner # final stage in Dockerfile
    image: ballurh-website-nextjs:latest
    container_name: ballurh-website-nextjs
    ports:
      - '3000:3000' # host:container
    env_file:
      - .env # NEXT_PUBLIC_* etc. variables are available to client
    environment:
      PORT: '3000'
      NODE_ENV: production
      DATABASE_URI: ${DATABASE_URI}
      PAYLOAD_SECRET: ${PAYLOAD_SECRET}
      CRON_SECRET: ${CRON_SECRET}
      PREVIEW_SECRET: ${PREVIEW_SECRET}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      # NEXT_TELEMETRY_DISABLED: "1"  # optional
    restart: unless-stopped
    # Healthcheck using Node (no curl/wget needed in the image)
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/ar/profit-calculator', r=>{if(r.statusCode<500)process.exit(0);process.exit(1)}).on('error',()=>process.exit(1))",
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  # postgres:
  #   image: 'postgres:17.5'
  #   container_name: 'postgres17.5'
  #   environment:
  #     POSTGRES_PASSWORD: '0000'
  #   ports:
  #     - '5432:5432'
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   logging:
  #     driver: none

volumes:
  pgdata:
  node_modules:
